---
---

@string{aps = {American Physical Society,}}


@INPROCEEDINGS {huq2025automated,
author = { Huq, Syed Fatiul and Tafreshipour, Mahan and Kalcevich, Kate and Malek, Sam },
booktitle = { 2025 IEEE/ACM 47th International Conference on Software Engineering (ICSE) },
title = {{ Automated Generation of Accessibility Test Reports from Recorded User Transcripts }},
year = {2025},
volume = {},
ISSN = {1558-1225},
pages = {534-546},
abstract = { Testing for accessibility is a significant step when developing software, as it ensures that all users, including those with disabilities, can effectively engage with web and mobile applications. While automated tools exist to detect accessibility issues in software, none are as comprehensive and effective as the process of user testing, where testers with various disabilities evaluate the application for accessibility and usability issues. However, user testing is not popular with software developers as it requires conducting lengthy interviews with users and later parsing through large recordings to derive the issues to fix. In this paper, we explore how large language models (LLMs) like GPT 4.0, which have shown promising results in context comprehension and semantic text generation, can mitigate this issue and streamline the user testing process. Our solution, called Reca11, takes in auto-generated transcripts from user testing video recordings and extracts the accessibility and usability issues mentioned by the tester. Our systematic prompt engineering determines the optimal configuration of input, instruction, context and demonstrations for best results. We evaluate Reca11's effectiveness on 36 user testing sessions across three applications. Based on the findings, we investigate the strengths and weaknesses of using LLMs in this space. },
keywords = {software accessibility;large language models;crowd-sourced software testing},
doi = {10.1109/ICSE55347.2025.00043},
url = {https://doi.ieeecomputersociety.org/10.1109/ICSE55347.2025.00043},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month =May}


@inproceedings{10.1145/3597503.3639228,
author = {He, Ziyao and Huq, Syed Fatiul and Malek, Sam},
title = {"I tend to view ads almost like a pestilence": On the Accessibility Implications of Mobile Ads for Blind Users},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3639228},
doi = {10.1145/3597503.3639228},
abstract = {Ads are integral to the contemporary Android ecosystem, generating revenue for free-to-use applications. However, injected as third-party content, ads are displayed on native apps in pervasive ways that affect easy navigation. Ads can prove more disruptive for blind users, who rely on screen readers for navigating an app. While the literature has looked into either the accessibility of web advertisements or the privacy and security implications of mobile ads, a research gap on the accessibility of mobile ads remains, which we aim to bridge. We conduct an empirical study analyzing 500 ad screens in Android apps to categorize and examine the accessibility issues therein. Additionally, we conduct 15 qualitative user interviews with blind Android users to better understand the impact of those accessibility issues, how users interact with ads and their preferences. Based on our findings, we discuss the design and practical strategies for developing accessible ads.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {197},
numpages = {13},
keywords = {Android, accessibility, advertisement, screen reader},
location = {Lisbon, Portugal},
series = {ICSE '24}
}

@inproceedings{huq2023a11ydev,
author = {Huq, Syed Fatiul and Alshayban, Abdulaziz and He, Ziyao and Malek, Sam},
title = {#A11yDev: Understanding Contemporary Software Accessibility Practices from Twitter Conversations},
year = {2023},
isbn = {9781450394215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3544548.3581455},
doi = {10.1145/3544548.3581455},
abstract = {It is crucial to make software, with its ever-growing influence on everyday lives, accessible to all, including people with disabilities. Despite promoting software accessibility through government regulations, development guidelines, tools and frameworks, investigations reveal a marketplace of inaccessible web and mobile applications. To better understand the limitations of contemporary software industry in adopting accessibility practices, it is necessary to construct a holistic view that combines the perspectives of software practitioners, stakeholders and end users. In this paper, we collect 637 conversations from Twitter to synthesize and qualitatively analyze discussions posted about software accessibility. Our findings observe an active community that provides feedback on inaccessible software, shares personal accounts of development practices and advocates for inclusivity. By perceiving software accessibility from process, profession and people viewpoints, we present current conventions, challenges and possible resolutions with four emergent themes: cost and incentives, awareness and advocacy, technology and resources, and integration and inclusion.},
booktitle = {Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems},
articleno = {217},
numpages = {18},
keywords = {human factors of software engineering, qualitative study, software accessibility},
location = {Hamburg, Germany},
series = {CHI '23}
}


@inproceedings{mehralian2023too,
author = {Mehralian, Forough and Salehnamadi, Navid and Huq, Syed Fatiul and Malek, Sam},
title = {Too Much Accessibility is Harmful! Automated Detection and Analysis of Overly Accessible Elements in Mobile Apps},
year = {2023},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3551349.3560424},
doi = {10.1145/3551349.3560424},
abstract = {Mobile apps, an essential technology in today’s world, should provide equal access to all, including 15\% of the world population with disabilities. Assistive Technologies&nbsp;(AT), with the help of Accessibility APIs, provide alternative ways of interaction with apps for disabled users who cannot see or touch the screen. Prior studies have shown that mobile apps are prone to the under-access problem, i.e., a condition in which functionalities in an app are not accessible to disabled users, even with the use of ATs. We study the dual of this problem, called the over-access problem, and defined as a condition in which an AT can be used to gain access to functionalities in an app that are inaccessible otherwise. Over-access has severe security and privacy implications, allowing one to bypass protected functionalities using ATs, e.g., using VoiceOver to read notes on a locked phone. Over-access also degrades the accessibility of apps by presenting to disabled users information that is actually not intended to be available on a screen, thereby confusing and hindering their ability to effectively navigate. In this work, we first empirically study overly accessible elements in Android apps and define a set of conditions that can result in over-access problem. We then present OverSight, an automated framework that leverages these conditions to detect overly accessible elements and verifies their accessibility dynamically using an AT. Our empirical evaluation of OverSight on real-world apps demonstrates OverSight’s effectiveness in detecting previously unknown security threats, workflow violations, and accessibility issues.},
booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
articleno = {103},
numpages = {13},
keywords = {Accessibility, Android, Security, and Software Testing},
location = {Rochester, MI, USA},
series = {ASE '22}
}

@misc{ganguly2020impactproductivityremotelyworking,
      title={Impact on the Productivity of Remotely Working IT Professionals of Bangladesh during the Coronavirus Disease 2019}, 
      author={Kishan Kumar Ganguly and Noshin Tahsin and Mridha Md. Nafis Fuad and Toukir Ahammed and Moumita Asad and Syed Fatiul Huq and A. T. M. Fazlay Rabbi and Kazi Sakib},
      year={2020},
      eprint={2008.11636},
      archivePrefix={arXiv},
      primaryClass={cs.CY},
      url={https://arxiv.org/abs/2008.11636}, 
}

@INPROCEEDINGS{huq2020developer,
  author={Huq, Syed Fatiul and Sadiq, Ali Zafar and Sakib, Kazi},
  booktitle={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={Is Developer Sentiment Related to Software Bugs: An Exploratory Study on GitHub Commits}, 
  year={2020},
  volume={},
  number={},
  pages={527-531},
  abstract={The outcome of software products primarily depends on the developers, including their emotion or sentiment in a software development environment. Developer emotions have been observed to be correlated to several patterns, for instance, task resolution time, developer turnover, etc. by conducting sentiment analysis on software collaborative artifacts like Commits. This study aims to quantify the impact of those patterns by finding a relation between developer sentiment and software bugs. To do so, Fix-Inducing Changes — changes that introduce bugs to the system — are detected, along with changes that precede or fix those bugs. Sentiment of these changes are determined from their Commit messages using Senti4SD. It is statistically observed that Commits that introduce, precede or fix bugs are significantly more negative than regular Commits, with a higher proportion of emotional (non-neutral) messages. It is also found that a distinction between buggy and correct fixes exists based on the message's neutrality.},
  keywords={Sentiment analysis;Conferences;Computer bugs;Collaboration;Human factors;Software systems;Software;Human Factors in Software Engineering;Sentiment Analysis;Fix Inducing Change},
  doi={10.1109/SANER48275.2020.9054801}}


@INPROCEEDINGS{huq2019understanding,
  author={Huq, Syed Fatiul and Sadiq, Ali Zafar and Sakib, Kazi},
  booktitle={2019 26th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={Understanding the Effect of Developer Sentiment on Fix-Inducing Changes: An Exploratory Study on GitHub Pull Requests}, 
  year={2019},
  volume={},
  number={},
  pages={514-521},
  abstract={Developer emotion or sentiment in a software development environment has the potential to affect performance, and consequently, the software itself. Sentiment analysis, conducted to analyze online collaborative artifacts, can derive effects of developer sentiment. This study aims to understand how developer sentiment is related to bugs, by analyzing the difference of sentiment between regular and Fix-Inducing Changes (FIC) - changes to code that introduce bugs in the system. To do so, sentiment is extracted from Pull Requests of 6 well known GitHub repositories, which contain both code and contributor discussion. Sentiment is calculated using a tool specializing in the software engineering domain: SentiStrength-SE. Next, FICs are detected from Commits by filtering the ones that fix bugs and tracking the origin of the code these remove. Commits are categorized based on FICs and assigned separate sentiment scores (-4 to +4) based on different preceding artifacts - Commits, Comments and Reviews from Pull Requests. The statistical result shows that FICs, compared to regular Commits, contain more positive Comments and Reviews. Commits that precede an FIC have more negative messages. Similarly, all the Pull Request artifacts combined are more negative for FICs than regular Commits.},
  keywords={Software;Sentiment analysis;Computer bugs;Task analysis;Tools;Software engineering;Collaboration;Software Engineering, Sentiment Analysis, Data Mining},
  doi={10.1109/APSEC48747.2019.00075}}


@article{huq2020evolutionary,
  booktitle={2020 Report on the 8th International Workshop on Quantitative Approaches to Software Quality (QuASoQ)},
  title={On the Evolutionary Properties of Fix Inducing Changes},
  author={Huq, Syed Fatiul and Azmain, Md Aquib and Nahar, Nadia and Tawhid, Md Nurul Ahad},
  abstract={A major aspect of maintaining the quality of software systems is the management of bugs. Bugs are commonly fixed in a corrective manner; detected after the code is tested or reported in production. Analyzing Fix-Inducing Changes (FIC) — developer code that introduces bugs — provides the opportunity to estimate these bugs proactively. This study analyzes the evolution of FICs to visualize patterns associated with the introduction of bugs throughout and within project releases. Furthermore, the association between FICs and complexity metrics, an important element of software evolution, is extracted to quantify the characteristics of buggy code. The findings indicate that FICs become less frequent as the software evolves and more commonly appear in the early stages of individual releases. It is also observed that FICs are correlated to longer Commit intervals. Lastly, FICs are found to be more present in codes with fewer lines and less cyclomatic complexity, which corresponds with the law of growing complexity in software evolution.},
  year={2020}
}

@book{przibram1967letters,
  bibtex_show={true},
  title={Letters on wave mechanics},
  author={Einstein, Albert and Schrödinger, Erwin and Planck, Max and Lorentz, Hendrik Antoon and Przibram, Karl},
  year={1967},
  publisher={Vision},
  preview={wave-mechanics.gif},
  abbr={Vision}
}
